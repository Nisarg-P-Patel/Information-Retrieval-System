# -*- coding: utf-8 -*-
"""Meta Search Techniques Implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ddjTqASFLd7K1GdGGF381-XusevsJcDY

# AIM :- Implement meta search techniques on given data.

# Objective

Given a set of rankings by different evaluators, perform following meta search techniques and determine the final ranking.
    1. Borda
    2. Condorcet
    3. Reciprocal

# Asking number of search engine
"""

#taking number of system

system = int(input("Enter number of system\n"))

"""# Asking number of maximum pages"""

#taking number of pages

pages = int(input("Enter number of pages\n"))

"""# Taking input from user"""

#taking input from the user

print("Enter the page order saperated by ','")
final_data = []
for x in range(system):
    temp = (input("Enter the value of system "+str(x+1)+"\n").lower()).split(",")
    final_data.append(temp)

#printing fetched data

final_data

"""# Implementing Borda Search Engine"""

#applying Borda Method

not_fetched = []

score = [0.0 for x in range(pages)]
# print(score)
for x in range(len(final_data)):
    if len(final_data[x]) != pages:
        extra = pages-len(final_data[x])
        extra = float(extra*(extra+1)/2)
        temp_1 = [chr(x) for x in range(97,97+pages)]
        for y in range(len(final_data[x])):
            score[ord(final_data[x][y])-97] += pages-y
            temp_1.remove(final_data[x][y])
        not_fetched.append(temp_1)
        for y in range(len(temp_1)):
            score[ord(temp_1[y])-97] += float(extra/len(temp_1))
    else:
        for y in range(len(final_data[x])):
            score[ord(final_data[x][y])-97] += pages-y
# print(score)
temp = score[:]
temp.sort()
final = [chr(score.index(x)+97) for x in temp[::-1]]
print('Final ranking is:')
print(final)

"""# Implementing Condorcet Search Engine"""

#applying Condorcet Ranking

score = []
for x in range(pages):
    temp = []
    for y in range(pages):
        temp.append([0,0,0])
    score.append(temp)
# print(score)
for x in range(len(final_data)):
    for y in range(len(final_data[x])):
        for z in range(len(final_data[x])):
            if y<z:
                score[ord(final_data[x][y])-97][ord(final_data[x][z])-97][0] +=1
            elif y>z:
                score[ord(final_data[x][y])-97][ord(final_data[x][z])-97][1] +=1

for x in range(len(not_fetched)):
    temp_1 = [chr(x) for x in range(97,97+pages)]
    for y in range(len(not_fetched[x])):
        temp_1.remove(not_fetched[x][y])
    for z in range(len(temp_1)):
        for w in range(len(not_fetched[x])):
            score[ord(temp_1[z])-97][ord(not_fetched[x][w])-97][0] += 1
            score[ord(not_fetched[x][w])-97][ord(temp_1[z])-97][1] += 1
    for y in range(len(temp_1)):
        for z in range(y,len(temp_1)):
            score[ord(temp_1[y])-97][ord(temp_1[z])-97][2] +=1

final_score = [[0,0,0] for x in range(pages)]
for x in range(len(score)):
    for y in range(len(score[x])):
        if score[x][y][0]>score[x][y][1]:
            final_score[x][0] += 1
        elif score[x][y][0]<score[x][y][1]:
            final_score[x][1] += 1
        elif x==y:
            continue
        else:
            final_score[x][2] += 1
temp = final_score[:]
temp.sort()
final = [chr(final_score.index(x)+97) for x in temp[::-1]]
print('Final ranking is:')
print(final)

"""# Implementing Reciprocal Search Engine"""

# applying Reciprocal Ranking

score = [0.0 for x in range(pages)]
for x in range(len(final_data)):
    for y in range(len(final_data[x])):
        score[ord(final_data[x][y])-97] += (1/(y+1))
# print(score)
temp = score[:]
temp.sort()
final = [chr(score.index(x)+97) for x in temp[::-1]]
print('Final ranking is:')
print(final)

"""# Learning Outcomes

1. I got to learn how meta search engine works.
2. I got to learn how different algorithms can be applied to the same.
3. I got to learn process of each and every search engine and it's procedures.
"""